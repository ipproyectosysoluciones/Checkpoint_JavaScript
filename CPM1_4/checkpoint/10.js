/**
 * Autor: Jamer Jos√© Rebolledo Quiroz
 * Github: https://github.com/jamerrq
 * Linkedin: https://linkedin.com/in/jamerrq
 */

const { BinarySearchTree } = require('../DS');

/* ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è

üîü ***** EJERCICIO 10 - BINARYSEARCHTREE ***** - ingresar() üîü

¬°Atenci√≥n! Est√° llegando nuestro primer cliente. Debemos venderle la entrada a
la pel√≠cula que quiere ver. Para esto tendr√°s que agregar al prototipo de
"BinarySearchTree" un m√©todo llamado "ingresar". Este recibir√° por par√°metro un
arreglo de objetos en los que se encuentran los horarios y nombres de las
pel√≠culas.

Tendr√°s que recorre el √°rbol y agregar la propiedad "ticket" con el valor true
en cada uno de los nodos que coincida con los elementos del arreglo que recibes
por par√°metro. De esta forma podremos identificar qu√© tickets tienen due√±o y
cu√°ntos quedan disponibles.


‚õîÔ∏è IMPORTANTE ‚õîÔ∏è
1) Tanto los nodos del √°rbol como los elementos del array de objetos ser√°n
   valores √∫nicos.
2) Si el arreglo est√° vac√≠o retornar false.


üìù EJEMPLO üìù √ÅRBOL         { nombre: "Chaplin", horario: 10 }
                             /                             \
       {nombre: "El Hobbit", horario: 7}     {nombre: "Masacre en Texas", horario: 22}
                         /                                       \
{nombre: "300", horario: 6}            {nombre: "Harry potter", horario: 23}


INPUT ---> [{ nombre: "Harry potter", horario: 23 }, { nombre: "300", horario: 6
}, { nombre: "El Hobbit", horario: 7 }]; OUTPUT -->
                            { nombre: "Chaplin", horario: 10 }
                             /                             \
       {nombre: "El Hobbit", horario: 7, ticket: true}     {nombre: "Masacre en Texas", horario: 22}
                         /                                       \
{nombre: "300", horario: 6, ticket: true}            {nombre: "Harry potter",
horario: 23, ticket: true}
*/
BinarySearchTree.prototype.ingresar = function (arregloDePeliculas) {
    // Tu c√≥digo aqu√≠:
    if (!arregloDePeliculas.length) return false;
    let tPeli = this.value.nombre;
    let tHora = this.value.horario;
    let found = arregloDePeliculas.reduce((acc, value) => {
        // console.log(tPeli)
        return acc || (value["nombre"] == tPeli && value["horario"] == tHora);
    }, false);
    // console.log(found, tPeli);
    if (found) {
        this.value.ticket = true;
    }
    if (this.left) this.left.ingresar(arregloDePeliculas);
    if (this.right) this.right.ingresar(arregloDePeliculas);
};

/*‚ö†Ô∏è NO MODIFICAR NADA DEBAJO DE ESTA LINEA ‚ö†Ô∏è*/
module.exports = BinarySearchTree;
