/**
 * Autor: Jamer Jos√© Rebolledo Quiroz
 * Github: https://github.com/jamerrq
 * Linkedin: https://linkedin.com/in/jamerrq
 */
const { LinkedList } = require('../DS');
// ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è
//
//
// 8Ô∏è‚É£ ** EJERCICIO 8 LINKEDLIST** - tacharLista() 8Ô∏è‚É£
//
// Lleg√≥ la hora de revisar el cat√°logo de ropa disponible! tendremos que tachar
// las que hayan se hayan agotado el stock Agregar al prototype de LinkedList el
// m√©todo üìÑ tacharLista() üìÑ el cu√°l recibir√° por par√°metros un array de
// strings, Tendr√°s que retornar una nueva lista en base a las prendas que hay
// en el array. Es decir, tendr√°s que agregar a la nueva lista los elementos que
// NO coincidan en la lista actual con el array.
//
// EJEMPLOS: Dada la siguiente lista de strings: ('Pantalon') ‚û° ('Zapatos') ‚û°
// ('Camisa') ‚û° ('Calcetines') ‚û° ('Gafas') ‚û° ('Sweater') ‚û°
//
// Y dado el siguiente array por par√°metros: ['Gafas', 'Zapatos']
// lista.tachar(array): Devuelve ‚û° ('Pantalon') ‚û° ('Camisa') ‚û° ('Calcetines') ‚û°
// ('Sweater') ‚û°
//
// REQUISITOS: üü¢ Retornar una NUEVA LinkedList en base a los elementos del
// arreglo recibido por par√°metros. üü¢ Si el arreglo viene vac√≠o retornar la
// LinkedList COMPLETA. Tip: Tanto las LinkedList como los arreglos, contendr√°n
// siempre strings.

LinkedList.prototype.tacharLista = function (lista) {
    // Tu c√≥digo aqu√≠:
    let newL = new LinkedList();
    let temp = this.head;
    while (temp) {
        if (!lista.includes(temp.value)) {
            newL.add(temp.value);
        }
        temp = temp.next;
    }
    return newL;
}




// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = {
    LinkedList
};